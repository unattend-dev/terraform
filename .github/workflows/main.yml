name: Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency: CI
jobs:
  
  analyze-code:
    name: Analyze Code
    uses: informatievlaanderen/build-pipeline/.github/workflows/analyze-code.yml@main
    with:
      registry: association-registry-invitations
    secrets: inherit
  
  set-release-version:
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: informatievlaanderen/build-pipeline/.github/actions/setup-nodejs@main

      - name: Run Semantic Release dry-run
        shell: bash
        run: npx semantic-release --dry-run
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ secrets.UD_GIT_USER }}
          GIT_AUTHOR_NAME: ${{ secrets.UD_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.UD_GIT_USER }}
          GIT_EMAIL: ${{ secrets.UD_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.UD_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.UD_GIT_EMAIL }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo $(cat semver)
          echo ::set-output name=version::$(cat semver)
          echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
        shell: bash
  
  build-backoffice-api:
    if: needs.set-release-version.outputs.version != 'none'
    name: Build BackOffice API
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.UD_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/publish.sh Unattend.BackOffice.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh Unattend.BackOffice.Api backoffice-api
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/unattend/backoffice-api:$SEMVER -o ~/backoffice-api.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Arrtifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: backoffice-api
          path: ~/backoffice-api.tar

  build-backoffice-UI:
    if: needs.set-release-version.outputs.version != 'none'
    name: Build BackOffice UI
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.UD_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/publish.sh Unattend.BackOffice.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh Unattend.BackOffice.Api backoffice-api
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/unattend/backoffice-api:$SEMVER -o ~/backoffice-api.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Arrtifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: backoffice-api
          path: ~/backoffice-api.tar
  
  build-invoice-projectionhost:
    if: needs.set-release-version.outputs.version != 'none'
    name: Build Invoice ProjectionHost
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.UD_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/publish.sh Unattend.BackOffice.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh Unattend.BackOffice.Api backoffice-api
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/unattend/backoffice-api:$SEMVER -o ~/backoffice-api.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Arrtifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: backoffice-api
          path: ~/backoffice-api.tar

  build-invoice-scheduler:
    if: needs.set-release-version.outputs.version != 'none'
    name: Build Invoice Scheduler
    runs-on: ubuntu-latest
    needs: [ set-release-version ]
    steps:
      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.UD_DOTNET_VERSION }}

      - name: .NET version
        shell: bash
        run: dotnet --info

      - name: Clean
        run: dotnet nuget locals all --clear

      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore

      - name: Run dependencies
        shell: bash
        run: |
          docker compose up -d

      - name: Set solution info
        shell: bash
        run: |
          docker run --network host -e CI_BUILD_NUMBER -e GIT_HASH --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/set-solution-info.sh
        env:
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Publish via docker run
        shell: bash
        run: |
          docker run --network host --rm -v $(pwd):/app -w /app/ mcr.microsoft.com/dotnet/sdk:6.0.201 /bin/sh .github/build-scripts/publish.sh Unattend.BackOffice.Api

      - name: Build image
        shell: bash
        run: |
          .github/build-scripts/build-docker.sh Unattend.BackOffice.Api backoffice-api
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          CI_BUILD_NUMBER: ${{ needs.set-release-version.outputs.version }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/unattend/backoffice-api:$SEMVER -o ~/backoffice-api.tar
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}

      - name: Upload Arrtifact
        if: needs.set-release-version.outputs.version != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: backoffice-api
          path: ~/backoffice-api.tar

  release:
    if: needs.set-release-version.outputs.version != 'none'
    name: Semantic Release
    runs-on: ubuntu-latest
    needs:
      - build-backoffice-api
      - build-backoffice-ui
      - build-invoice-projectionhost
      - build-invoice-scheduler
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Token
        id: generate_token   # Add an ID to this step for reference
        run: node .github/build-scripts/generate-token.js
        env:
          APP_ID: ${{ secrets.MYBOT_APP_ID }}
          PRIVATE_KEY: ${{ secrets.MYBOT_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.installationToken  }}

      - name: Install NPM dependencies
        shell: bash
        run: npm install --legacy-peer-deps

      - name: Run Semantic Release
        shell: bash
        run: npx semantic-release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.installationToken  }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_USERNAME: ${{ steps.generate_token.outputs.installationToken }}
          GIT_AUTHOR_NAME: ${{ secrets.UD_GIT_USER }}
          GIT_COMMITTER_NAME: ${{ secrets.UD_GIT_USER }}
          GIT_EMAIL: ${{ secrets.UD_GIT_EMAIL }}
          GIT_AUTHOR_EMAIL: ${{ secrets.UD_GIT_EMAIL }}
          GIT_COMMITTER_EMAIL: ${{ secrets.UD_GIT_EMAIL }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.UD_BUILD_DOCKER_REGISTRY }}

      - name: Set Release Version
        id: set-version
        run: |
          [ ! -f semver ] && echo none > semver
          echo $(cat semver)
          echo ::set-output name=version::$(cat semver)
          echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
        shell: bash
        
        
  push_images_to_test:
    if: needs.set-release-version.outputs.version != 'none'
    needs:
      - set-release-version
      - release
    name: Push images to Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'backoffice-api',
            'backoffice-ui',
            'invoice-projectionhost',
            'invoice-scheduler'
          ]
    steps:
      - name: Configure AWS credentials (Test)
        if: needs.set-release-version.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Test)
        if: needs.set-release-version.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.services}}
          path: ~/

      - name: Load image
        shell: bash
        run: docker image load -i ~/${{matrix.services}}.tar

      - name: Push docker images to ECR Test
        if: needs.set-release-version.outputs.version != 'none'
        shell: bash
        run: |
          echo $SEMVER
          docker push $BUILD_DOCKER_REGISTRY/association-registry/${{matrix.services}}:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.set-release-version.outputs.version }}
          WORKSPACE: ${{ github.workspace }}
                  
        